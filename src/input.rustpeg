use std::str;

use ordermap::OrderMap;

use super::model::{Field, Table};

space
  = [ \t\r\n]+

identifier -> String
  = id:$([A-z_]+[A-z0-9_]*) { id.to_string() }

identifiers -> Vec<String>
  = identifier ++ (space? "," space?)

integer -> usize
  = i:$([0-9]+) { i.parse().unwrap() }

table -> String
  = table:identifier { table }

field_define -> Field
  = key:"*"? name:identifier {
      let is_key = match key { Some(_) => true, None => false };

      let parsed_name = name.parse().expect(&format!("Invalid field name {}", name));
      Field {
        name: parsed_name,
        key: is_key,
        cardinality: None,
        max_length: None
      }
    }

field_defines -> Vec<Field>
  = field_define ++ (space? "," space?)

create -> Table
  = table:table space?
    "(" space? fields:field_defines space? ")" {
      let mut field_map = OrderMap::new();
      for field in fields {
        field_map.insert(field.name.clone(), field);
      }

      let parsed_name = table.parse().expect(&format!("Invalid table name {}", table));
      let mut t = Table {
        name: parsed_name,
        fields: field_map,
        ..Default::default()
      };
      t.add_pk_fd();

      t
    }

func_dep -> (String, Vec<String>, Vec<String>)
  = table:identifier space lhs:identifiers space "->"
    space rhs:identifiers { (table, lhs, rhs) }

inc_dir -> String
  = dir:$("<=" / "==") { dir.to_string() }

inc_dep -> Vec<(String, Vec<String>, String, Vec<String>)>
  = left_table:identifier space left_fields:identifiers
    space dir:inc_dir space
    right_table:identifier space maybe_right_fields:(ids:identifiers { Some(ids) } / "..." { None })  {
      let right_fields = match maybe_right_fields {
        Some(fields) => fields,
        None => left_fields.clone()
      };
      let mut inds: Vec<_> = Vec::new();
      if dir == "==" {
        inds.push((right_table.clone(), right_fields.clone(), left_table.clone(), left_fields.clone()));
      }
      inds.push((left_table, left_fields, right_table, right_fields));

      inds
    }

table_frequency -> (String, Option<String>, usize, Option<usize>)
  = table:identifier space count:integer {
    (table, None, count, None)
  }

column_frequency -> (String, Option<String>, usize, Option<usize>)
  = table:identifier space column:identifier space count:integer space max_length: integer {
    (table, Some(column), count, Some(max_length))
  }

frequency -> (String, Option<String>, usize, Option<usize>)
  = table_frequency / column_frequency

pub input -> (Vec<Table>, Vec<(String, Vec<String>, Vec<String>)>,
          Vec<(String, Vec<String>, String, Vec<String>)>,
          Vec<(String, Option<String>, usize, Option<usize>)>)
  = tables:(create ++ "\n") "\n"*
    func_deps:(func_dep ** "\n") "\n"*
    inc_deps:(inc_dep ** "\n") "\n"*
    frequencies:((frequency ** "\n"))? "\n"* {
      (tables, func_deps, inc_deps.into_iter().flat_map(|i| i).collect::<Vec<_>>(), frequencies.unwrap_or(Vec::new()))
    }
